import requests
from bs4 import BeautifulSoup
from telegram import Bot
import json
import os
import gspread
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials
import asyncio

# --- CONFIGURA√á√ÉO INICIAL ---
load_dotenv()

TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

if not TOKEN or not CHAT_ID:
    raise ValueError("ERRO: Vari√°veis TOKEN e CHAT_ID s√£o obrigat√≥rias.")

bot = Bot(token=TOKEN)

# --- FUN√á√ïES DO BOT ---

def debug_planilhas_disponiveis():
    """Lista todas as planilhas dispon√≠veis para debug."""
    print("\n=== DEBUG: Listando todas as planilhas dispon√≠veis ===")
    try:
        # Testando diferentes escopos de permiss√£o
        SCOPES_TO_TRY = [
            # Escopo mais amplo (recomendado)
            [
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive",
            ],
            # Escopo original
            [
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive.file",
            ],
            # Escopo mais restritivo
            [
                "https://www.googleapis.com/auth/spreadsheets.readonly",
                "https://www.googleapis.com/auth/drive.readonly",
            ]
        ]
        
        creds_json_str = os.getenv("GSPREAD_CREDENTIALS")
        
        if not creds_json_str:
            print("ERRO: GSPREAD_CREDENTIALS n√£o encontrado!")
            return None
            
        print("‚úì Credenciais encontradas")
        creds_info = json.loads(creds_json_str)
        print(f"‚úì Email da conta de servi√ßo: {creds_info.get('client_email', 'N√ÉO ENCONTRADO')}")
        print(f"‚úì Projeto: {creds_info.get('project_id', 'N√ÉO ENCONTRADO')}")
        
        gc = None
        for i, scopes in enumerate(SCOPES_TO_TRY, 1):
            print(f"\n--- Tentativa {i}: Testando escopos {scopes} ---")
            try:
                creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
                gc = gspread.authorize(creds)
                
                print("‚úì Autentica√ß√£o bem-sucedida!")
                spreadsheets = gc.openall()
                
                if spreadsheets:
                    print(f"‚úì Encontradas {len(spreadsheets)} planilhas com estes escopos:")
                    for j, sheet in enumerate(spreadsheets, 1):
                        print(f"  {j}. Nome: '{sheet.title}' | ID: {sheet.id}")
                    return gc
                else:
                    print("‚ùå Nenhuma planilha encontrada com estes escopos")
                    
            except Exception as e:
                print(f"‚ùå Erro com escopos {i}: {type(e).__name__}: {e}")
                continue
        
        # Se chegou aqui, nenhum escopo funcionou
        print("\n‚ùå NENHUMA planilha encontrada com nenhum escopo!")
        
        # Vamos tentar buscar por ID espec√≠fico se fornecido
        print("\n--- Tentativa alternativa: Buscar por URL/ID ---")
        print("üí° DICA: Se voc√™ souber o ID da planilha, podemos tentar acess√°-la diretamente")
        print("   O ID est√° na URL: https://docs.google.com/spreadsheets/d/[ID_AQUI]/edit")
        
        return None
        
    except json.JSONDecodeError:
        print("‚ùå ERRO: GSPREAD_CREDENTIALS n√£o √© um JSON v√°lido!")
        return None
    except Exception as e:
        print(f"‚ùå ERRO geral ao listar planilhas: {type(e).__name__}: {e}")
        return None

def carregar_produtos_da_planilha():
    """L√™ os produtos da Planilha Google com debug melhorado."""
    print("\n=== Iniciando acesso √† Planilha Google ===")
    
    # Primeiro, vamos fazer debug das planilhas dispon√≠veis
    gc = debug_planilhas_disponiveis()
    if not gc:
        # Vamos tentar uma abordagem alternativa: buscar por ID
        print("\n=== TENTATIVA ALTERNATIVA: Acesso direto por ID ===")
        print("üí° Vamos tentar diferentes m√©todos de acesso...")
        
        try:
            SCOPES = [
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive",
            ]
            creds_json_str = os.getenv("GSPREAD_CREDENTIALS")
            creds_info = json.loads(creds_json_str)
            creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
            gc = gspread.authorize(creds)
            
            # Tentar listar arquivos do Drive diretamente
            print("\n--- Tentando listar via Google Drive API ---")
            
            # Se n√£o conseguimos listar, vamos tentar um m√©todo mais direto
            print("üîç Buscando planilhas com diferentes filtros...")
            
            # M√©todo alternativo: tentar abrir por diferentes nomes
            possible_names = ["Monitor", "monitor", "MONITOR", "Monitor de Pre√ßos", "Monitor de Precos"]
            
            for name in possible_names:
                try:
                    print(f"  Tentando nome: '{name}'")
                    spreadsheet = gc.open(name)
                    print(f"  ‚úì SUCESSO! Planilha encontrada: '{name}'")
                    print(f"  üìã ID: {spreadsheet.id}")
                    print(f"  üîó URL: {spreadsheet.url}")
                    
                    worksheet = spreadsheet.sheet1
                    records = worksheet.get_all_records()
                    print(f"  üìä {len(records)} linhas encontradas")
                    
                    # Processar produtos...
                    produtos = []
                    for i, row in enumerate(records, 1):
                        try:
                            nome = row.get('Nome', '').strip()
                            url = row.get('URL', '').strip()
                            preco_str = str(row.get('Preco_Desejado', '0')).replace(",", ".").strip()
                            
                            if not nome or not url:
                                continue
                                
                            preco_desejado = float(preco_str)
                            produtos.append({
                                "nome": nome,
                                "url": url,
                                "preco_desejado": preco_desejado
                            })
                            
                        except Exception:
                            continue
                    
                    print(f"  ‚úÖ {len(produtos)} produtos v√°lidos carregados!")
                    return produtos
                    
                except gspread.exceptions.SpreadsheetNotFound:
                    print(f"  ‚ùå '{name}' n√£o encontrada")
                    continue
                except Exception as e:
                    print(f"  ‚ùå Erro com '{name}': {e}")
                    continue
            
            print("\n‚ùå Nenhuma planilha encontrada com os nomes testados")
            
        except Exception as e:
            print(f"‚ùå Erro na tentativa alternativa: {e}")
        
        return []
    
    # Se gc existe, continuar com o processo normal...
    sheet_names_to_try = ["Monitor", "monitor", "MONITOR"]
    
    for sheet_name in sheet_names_to_try:
        try:
            print(f"\n--- Tentando abrir planilha: '{sheet_name}' ---")
            spreadsheet = gc.open(sheet_name)
            worksheet = spreadsheet.sheet1
            
            print(f"‚úì Planilha '{sheet_name}' encontrada!")
            print(f"‚úì ID da planilha: {spreadsheet.id}")
            print(f"‚úì URL da planilha: {spreadsheet.url}")
            
            records = worksheet.get_all_records()
            print(f"‚úì Dados carregados: {len(records)} linhas encontradas")
            
            if records:
                print("\n--- Primeiras 3 linhas dos dados ---")
                for i, record in enumerate(records[:3], 1):
                    print(f"Linha {i}: {record}")
            
            produtos = []
            for i, row in enumerate(records, 1):
                try:
                    nome = row.get('Nome', '').strip()
                    url = row.get('URL', '').strip()
                    preco_str = str(row.get('Preco_Desejado', '0')).replace(",", ".").strip()
                    
                    if not nome or not url:
                        print(f"‚ö†Ô∏è  Linha {i} ignorada: nome ou URL vazio")
                        continue
                        
                    try:
                        preco_desejado = float(preco_str)
                    except (ValueError, TypeError):
                        print(f"‚ö†Ô∏è  Linha {i} ignorada: pre√ßo inv√°lido '{preco_str}'")
                        continue
                    
                    produto = {
                        "nome": nome,
                        "url": url,
                        "preco_desejado": preco_desejado
                    }
                    produtos.append(produto)
                    print(f"‚úì Produto {len(produtos)} adicionado: {nome} - R$ {preco_desejado}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è  Erro na linha {i}: {e}")
                    continue
            
            print(f"\n‚úì Total de produtos v√°lidos carregados: {len(produtos)}")
            return produtos
            
        except gspread.exceptions.SpreadsheetNotFound:
            print(f"‚ùå Planilha '{sheet_name}' n√£o encontrada")
            continue
        except Exception as e:
            print(f"‚ùå Erro ao acessar planilha '{sheet_name}': {type(e).__name__}: {e}")
            continue
    
    print("\n‚ùå NENHUMA planilha 'Monitor' encontrada!")
    print("\nüîß PR√ìXIMOS PASSOS:")
    print("1. Aguarde 5-10 minutos e tente novamente (sincroniza√ß√£o do Google)")
    print("2. Verifique se o nome da planilha √© exatamente 'Monitor'")
    print("3. Tente remover e re-adicionar as permiss√µes")
    print("4. Se poss√≠vel, copie o ID da planilha da URL para tentarmos acesso direto")
    
    return []

def pegar_preco_exato(url):
    """Extrai o pre√ßo do Mercado Livre com tratamento robusto."""
    if not url or not url.strip():
        return None
        
    print(f"  üîç Buscando pre√ßo em: {url[:80]}...")
    
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        
        # M√∫ltiplas estrat√©gias para encontrar o pre√ßo
        selectors = [
            'meta[itemprop="price"]',
            '.andes-money-amount__fraction',
            '.price-tag-fraction',
            '[data-testid="price"]',
            '.notranslate'
        ]
        
        for selector in selectors:
            elements = soup.select(selector)
            for element in elements:
                try:
                    if element.name == 'meta' and element.get('content'):
                        price_text = element['content']
                    else:
                        price_text = element.get_text().strip()
                    
                    # Limpar e converter o pre√ßo
                    price_clean = ''.join(filter(lambda x: x.isdigit() or x == '.', price_text.replace(',', '.')))
                    if price_clean and '.' in price_clean:
                        price = float(price_clean)
                        if 10 <= price <= 1000000:  # Valida√ß√£o b√°sica de pre√ßo
                            print(f"  ‚úì Pre√ßo encontrado: R$ {price:,.2f} (usando {selector})")
                            return price
                except (ValueError, TypeError):
                    continue
        
        print(f"  ‚ùå Pre√ßo n√£o encontrado para {url[:50]}...")
        return None
        
    except requests.RequestException as e:
        print(f"  ‚ùå Erro de rede ao buscar {url[:50]}...: {e}")
        return None
    except Exception as e:
        print(f"  ‚ùå Erro inesperado ao buscar pre√ßo: {type(e).__name__}: {e}")
        return None

async def enviar_alerta(nome, url, preco, preco_desejado):
    """Envia alerta via Telegram."""
    try:
        mensagem = (
            f"üéâ *PRE√áO BAIXOU!*\n\n"
            f"**Produto:** {nome}\n"
            f"**üí∞ Pre√ßo atual:** R$ {preco:,.2f}\n"
            f"**üéØ Pre√ßo desejado:** R$ {preco_desejado:,.2f}\n"
            f"**üí∏ Economia:** R$ {preco_desejado - preco:,.2f}\n\n"
            f"üîó [Ver produto]({url})"
        )
        
        await bot.send_message(chat_id=CHAT_ID, text=mensagem, parse_mode="Markdown")
        print(f"  ‚úì Alerta enviado para o Telegram!")
        
    except Exception as e:
        print(f"  ‚ùå Erro ao enviar alerta: {type(e).__name__}: {e}")

async def fazer_verificacao_unica():
    """Executa uma verifica√ß√£o completa de pre√ßos."""
    print("\n" + "="*50)
    print("ü§ñ MONITOR DE PRE√áOS - INICIANDO VERIFICA√á√ÉO")
    print("="*50)
    
    produtos = carregar_produtos_da_planilha()
    
    if not produtos:
        print("\n‚ùå Nenhum produto para monitorar. Verifica√ß√£o encerrada.")
        return
    
    print(f"\nüîç Iniciando monitoramento de {len(produtos)} produtos...")
    alertas_enviados = 0
    
    for i, produto in enumerate(produtos, 1):
        nome = produto.get('nome', 'Produto sem nome')
        url = produto.get('url', '')
        preco_desejado = produto.get('preco_desejado', 0)
        
        print(f"\n[{i}/{len(produtos)}] üõçÔ∏è {nome}")
        print(f"  üí∞ Pre√ßo desejado: R$ {preco_desejado:,.2f}")
        
        if not url:
            print("  ‚ùå URL inv√°lida, pulando...")
            continue
        
        preco_atual = pegar_preco_exato(url)
        
        if preco_atual is not None:
            diferenca = preco_atual - preco_desejado
            if diferenca <= 0:
                print(f"  üéâ OPORTUNIDADE! Pre√ßo atual (R$ {preco_atual:,.2f}) ‚â§ desejado!")
                await enviar_alerta(nome, url, preco_atual, preco_desejado)
                alertas_enviados += 1
            else:
                print(f"  üìà Pre√ßo ainda alto. Diferen√ßa: +R$ {diferenca:,.2f}")
        else:
            print(f"  ‚ö†Ô∏è  N√£o foi poss√≠vel obter o pre√ßo")
        
        # Pausa entre verifica√ß√µes para evitar rate limiting
        if i < len(produtos):
            print("  ‚è≥ Aguardando 3s...")
            await asyncio.sleep(3)
    
    print(f"\n" + "="*50)
    print(f"‚úÖ VERIFICA√á√ÉO CONCLU√çDA!")
    print(f"üìä Produtos verificados: {len(produtos)}")
    print(f"üö® Alertas enviados: {alertas_enviados}")
    print("="*50)

if __name__ == "__main__":
    asyncio.run(fazer_verificacao_unica())
